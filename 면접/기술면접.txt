객체지향 프로그래밍 - 객체의 상호작용을 통해 프로그램이 동작하는 것이라고 생각합니다.

클래스              - 객체를 정의해놓은 것이라고 생각합니다.

인스턴스            - 클래스에서 만들어진 객체를 클래스의 인스턴스라고 생각합니다.

메소드              - 함수라고 불리고 코드의 재사용성을 높여준다고 알고있습니다.

MVC                 - Model, View, Controller로 나누어 구현하는 방법이라고 생각합니다.

Model               - 데이터를 처리하는 부분이라고 생각합니다.

View                - 화면에 표시되는 부분이라고 생각합니다.

Controller          - 데이터와 시각적 부분의 연결을 관리한다고 생각합니다.

객체                - 데이터와 관련된 동작을 모두 포함할 수 있는 것이라고 생각합니다.

오버라이딩          - 상위클래스의 메소드를 하위클래스에서 재정의 할 수 있는것이라고 생각합니다.

오버로딩            - 같은이름의 클래스를 여러개 정의하는 것이라고 생각합니다. (매개변수의 유형과 매개변수의 갯수)

JDBC                - 자바를 통해 데이터베이스에 접근 할 수 있는 프로그래밍이라고 생각합니다.

GET                 - POST방식에 비해 전송속도가 빠르고, 주소에 표시되어 보안성이 낮다고 생각합니다.

POST                - GET방식에 비해 전송속도가 느리고 주소에 표시되지 않아 보안성이 높다고 생각합니다.

Interface           - 추상클래스이고, 다중상속이 가능하다고 생각합니다.

HTML                - 문서를 작성하는 마크업 언어라고 생각합니다.

CSS                 - 스타일을 꾸밀 때, 사용하는 스크립트 언어라고 생각합니다.

Ajax                - jquery에 있는 통신방식의 하나로서 데이터베이스와 통신할 수 있게 동적으로 만들어주는 것이라고 생각한다.

Java                - 객체지향적 프로그래밍 언어라고 생각합니다.

MariaDB             - 오픈소스의 관계형 데이터베이스 관리 시스템이라고 생각합니다.

JSP                 - 클라이언트에게 정적인 화면을 동적인 화면으로 제공하기위해 사용하는것이라고 생각합니다.

Spring              - 동적인 웹사이트의 개발을 편하게 해주는 애플리케이션 프레임워크라고 생각합니다.
                      또, 대한민국 공공기관 웹표준으로 지정되어있습니다.(전자정부 표준프레임워크)

JNDI                - 디렉토리 서비스에서 제공하는 데이터 및 객체를 발견하고 참고하기위한 자바 API라고 생각합니다.

리눅스              - 윈도우와 같은 운영체제중 하나라고 생각합니다.

.net과 spring차이   - .net frame work는 어댑터기능 spring은 틀이있어서 개발이 더 쉽다고 알고있습니다.
                      spring 최근에 배운과정이라 저에게는 더 쉽다고 느껴집니다.

쓰레드              - 하나의 프로세스에서 두가지 또는 그 이상이 동시에 수행할수 있게 되는 것이라고 생각합니다.

컬렉션프레임워크    - 데이터를 저장하는 자료구조와 데이터를 처리하는 알고리즘을 구조화하여 클래스로 구현한 것이라고 생각합니다.
                    - List, Set, Map

Jquery클래스셀렉트  - $('.클래스')

자바스크립트셀렉트  - getElementsByClassName()

select * from summoner where ninkname = #{nickname}

상속                - 공통적인부분을 여러클래스가 받아서 동일하게 사용한다. 재사용을 위해서 사용함.

추상                - 구현되어져 있지않은 이름만 정의한 것 인터페이스는 상수만

절차지향 프로그래밍 - 순차적인 처리

inner join          - 조건에 맞는 값을 가져온다고 생각합니다.

outer join          - 조건에 상관없이 값을 가져오는것이라고 생각합니다.

self join           - 자기자신을 별칭을 붙여서 값을 가져온다고 생각합니다. 또 tree구조 형식에서 많이 쓰입니다.